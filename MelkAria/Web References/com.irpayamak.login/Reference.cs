//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MelkAria.com.irpayamak.login {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendSoap", Namespace="Send")]
    public partial class Send : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliveryOperationCompleted;
        
        private System.Threading.SendOrPostCallback MultiDeliveryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVirtualNumbersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPhoneGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduledSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveScheduledSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboxOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Send() {
            this.Url = global::MelkAria.Properties.Settings.Default.MelkAria_com_irpayamak_login_Send;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event CreditCompletedEventHandler CreditCompleted;
        
        /// <remarks/>
        public event DeliveryCompletedEventHandler DeliveryCompleted;
        
        /// <remarks/>
        public event MultiDeliveryCompletedEventHandler MultiDeliveryCompleted;
        
        /// <remarks/>
        public event GetVirtualNumbersCompletedEventHandler GetVirtualNumbersCompleted;
        
        /// <remarks/>
        public event GetPhoneGroupsCompletedEventHandler GetPhoneGroupsCompleted;
        
        /// <remarks/>
        public event SendToGroupCompletedEventHandler SendToGroupCompleted;
        
        /// <remarks/>
        public event ScheduledSendCompletedEventHandler ScheduledSendCompleted;
        
        /// <remarks/>
        public event GetScheduleStatusCompletedEventHandler GetScheduleStatusCompleted;
        
        /// <remarks/>
        public event RemoveScheduledSendCompletedEventHandler RemoveScheduledSendCompleted;
        
        /// <remarks/>
        public event GetInboxCompletedEventHandler GetInboxCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/SendSms", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SendSms(string username, string password, string from, string[] to, string text, bool flash) {
            object[] results = this.Invoke("SendSms", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        flash});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string username, string password, string from, string[] to, string text, bool flash) {
            this.SendSmsAsync(username, password, from, to, text, flash, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string username, string password, string from, string[] to, string text, bool flash, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        username,
                        password,
                        from,
                        to,
                        text,
                        flash}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/Credit", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double Credit(string username, string password) {
            object[] results = this.Invoke("Credit", new object[] {
                        username,
                        password});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void CreditAsync(string username, string password) {
            this.CreditAsync(username, password, null);
        }
        
        /// <remarks/>
        public void CreditAsync(string username, string password, object userState) {
            if ((this.CreditOperationCompleted == null)) {
                this.CreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOperationCompleted);
            }
            this.InvokeAsync("Credit", new object[] {
                        username,
                        password}, this.CreditOperationCompleted, userState);
        }
        
        private void OnCreditOperationCompleted(object arg) {
            if ((this.CreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCompleted(this, new CreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/Delivery", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Delivery(string recId) {
            object[] results = this.Invoke("Delivery", new object[] {
                        recId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeliveryAsync(string recId) {
            this.DeliveryAsync(recId, null);
        }
        
        /// <remarks/>
        public void DeliveryAsync(string recId, object userState) {
            if ((this.DeliveryOperationCompleted == null)) {
                this.DeliveryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliveryOperationCompleted);
            }
            this.InvokeAsync("Delivery", new object[] {
                        recId}, this.DeliveryOperationCompleted, userState);
        }
        
        private void OnDeliveryOperationCompleted(object arg) {
            if ((this.DeliveryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliveryCompleted(this, new DeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/MultiDelivery", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] MultiDelivery(string[] recId) {
            object[] results = this.Invoke("MultiDelivery", new object[] {
                        recId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void MultiDeliveryAsync(string[] recId) {
            this.MultiDeliveryAsync(recId, null);
        }
        
        /// <remarks/>
        public void MultiDeliveryAsync(string[] recId, object userState) {
            if ((this.MultiDeliveryOperationCompleted == null)) {
                this.MultiDeliveryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiDeliveryOperationCompleted);
            }
            this.InvokeAsync("MultiDelivery", new object[] {
                        recId}, this.MultiDeliveryOperationCompleted, userState);
        }
        
        private void OnMultiDeliveryOperationCompleted(object arg) {
            if ((this.MultiDeliveryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MultiDeliveryCompleted(this, new MultiDeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/GetVirtualNumbers", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetVirtualNumbers(string username, string password) {
            object[] results = this.Invoke("GetVirtualNumbers", new object[] {
                        username,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVirtualNumbersAsync(string username, string password) {
            this.GetVirtualNumbersAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetVirtualNumbersAsync(string username, string password, object userState) {
            if ((this.GetVirtualNumbersOperationCompleted == null)) {
                this.GetVirtualNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualNumbersOperationCompleted);
            }
            this.InvokeAsync("GetVirtualNumbers", new object[] {
                        username,
                        password}, this.GetVirtualNumbersOperationCompleted, userState);
        }
        
        private void OnGetVirtualNumbersOperationCompleted(object arg) {
            if ((this.GetVirtualNumbersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualNumbersCompleted(this, new GetVirtualNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/GetPhoneGroups", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPhoneGroups(string username, string password) {
            object[] results = this.Invoke("GetPhoneGroups", new object[] {
                        username,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPhoneGroupsAsync(string username, string password) {
            this.GetPhoneGroupsAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetPhoneGroupsAsync(string username, string password, object userState) {
            if ((this.GetPhoneGroupsOperationCompleted == null)) {
                this.GetPhoneGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPhoneGroupsOperationCompleted);
            }
            this.InvokeAsync("GetPhoneGroups", new object[] {
                        username,
                        password}, this.GetPhoneGroupsOperationCompleted, userState);
        }
        
        private void OnGetPhoneGroupsOperationCompleted(object arg) {
            if ((this.GetPhoneGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPhoneGroupsCompleted(this, new GetPhoneGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/SendToGroup", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendToGroup(string username, string password, string from, int[] groupIds, string text, bool flash) {
            object[] results = this.Invoke("SendToGroup", new object[] {
                        username,
                        password,
                        from,
                        groupIds,
                        text,
                        flash});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendToGroupAsync(string username, string password, string from, int[] groupIds, string text, bool flash) {
            this.SendToGroupAsync(username, password, from, groupIds, text, flash, null);
        }
        
        /// <remarks/>
        public void SendToGroupAsync(string username, string password, string from, int[] groupIds, string text, bool flash, object userState) {
            if ((this.SendToGroupOperationCompleted == null)) {
                this.SendToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendToGroupOperationCompleted);
            }
            this.InvokeAsync("SendToGroup", new object[] {
                        username,
                        password,
                        from,
                        groupIds,
                        text,
                        flash}, this.SendToGroupOperationCompleted, userState);
        }
        
        private void OnSendToGroupOperationCompleted(object arg) {
            if ((this.SendToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendToGroupCompleted(this, new SendToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/ScheduledSend", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ScheduledSend(string username, string password, string from, string[] to, int[] groupIds, string text, bool flash, int year, int month, int day, int hour, int minute) {
            object[] results = this.Invoke("ScheduledSend", new object[] {
                        username,
                        password,
                        from,
                        to,
                        groupIds,
                        text,
                        flash,
                        year,
                        month,
                        day,
                        hour,
                        minute});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduledSendAsync(string username, string password, string from, string[] to, int[] groupIds, string text, bool flash, int year, int month, int day, int hour, int minute) {
            this.ScheduledSendAsync(username, password, from, to, groupIds, text, flash, year, month, day, hour, minute, null);
        }
        
        /// <remarks/>
        public void ScheduledSendAsync(string username, string password, string from, string[] to, int[] groupIds, string text, bool flash, int year, int month, int day, int hour, int minute, object userState) {
            if ((this.ScheduledSendOperationCompleted == null)) {
                this.ScheduledSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduledSendOperationCompleted);
            }
            this.InvokeAsync("ScheduledSend", new object[] {
                        username,
                        password,
                        from,
                        to,
                        groupIds,
                        text,
                        flash,
                        year,
                        month,
                        day,
                        hour,
                        minute}, this.ScheduledSendOperationCompleted, userState);
        }
        
        private void OnScheduledSendOperationCompleted(object arg) {
            if ((this.ScheduledSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduledSendCompleted(this, new ScheduledSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/GetScheduleStatus", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetScheduleStatus(string username, string password, int scheduleId) {
            object[] results = this.Invoke("GetScheduleStatus", new object[] {
                        username,
                        password,
                        scheduleId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetScheduleStatusAsync(string username, string password, int scheduleId) {
            this.GetScheduleStatusAsync(username, password, scheduleId, null);
        }
        
        /// <remarks/>
        public void GetScheduleStatusAsync(string username, string password, int scheduleId, object userState) {
            if ((this.GetScheduleStatusOperationCompleted == null)) {
                this.GetScheduleStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleStatusOperationCompleted);
            }
            this.InvokeAsync("GetScheduleStatus", new object[] {
                        username,
                        password,
                        scheduleId}, this.GetScheduleStatusOperationCompleted, userState);
        }
        
        private void OnGetScheduleStatusOperationCompleted(object arg) {
            if ((this.GetScheduleStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleStatusCompleted(this, new GetScheduleStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/RemoveScheduledSend", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveScheduledSend(string username, string password, int scheduleId) {
            object[] results = this.Invoke("RemoveScheduledSend", new object[] {
                        username,
                        password,
                        scheduleId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveScheduledSendAsync(string username, string password, int scheduleId) {
            this.RemoveScheduledSendAsync(username, password, scheduleId, null);
        }
        
        /// <remarks/>
        public void RemoveScheduledSendAsync(string username, string password, int scheduleId, object userState) {
            if ((this.RemoveScheduledSendOperationCompleted == null)) {
                this.RemoveScheduledSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveScheduledSendOperationCompleted);
            }
            this.InvokeAsync("RemoveScheduledSend", new object[] {
                        username,
                        password,
                        scheduleId}, this.RemoveScheduledSendOperationCompleted, userState);
        }
        
        private void OnRemoveScheduledSendOperationCompleted(object arg) {
            if ((this.RemoveScheduledSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveScheduledSendCompleted(this, new RemoveScheduledSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Send/GetInbox", RequestNamespace="Send", ResponseNamespace="Send", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetInbox(string username, string password, string to, int year, int month, int day, int hour, int minute) {
            object[] results = this.Invoke("GetInbox", new object[] {
                        username,
                        password,
                        to,
                        year,
                        month,
                        day,
                        hour,
                        minute});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInboxAsync(string username, string password, string to, int year, int month, int day, int hour, int minute) {
            this.GetInboxAsync(username, password, to, year, month, day, hour, minute, null);
        }
        
        /// <remarks/>
        public void GetInboxAsync(string username, string password, string to, int year, int month, int day, int hour, int minute, object userState) {
            if ((this.GetInboxOperationCompleted == null)) {
                this.GetInboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboxOperationCompleted);
            }
            this.InvokeAsync("GetInbox", new object[] {
                        username,
                        password,
                        to,
                        year,
                        month,
                        day,
                        hour,
                        minute}, this.GetInboxOperationCompleted, userState);
        }
        
        private void OnGetInboxOperationCompleted(object arg) {
            if ((this.GetInboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboxCompleted(this, new GetInboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void CreditCompletedEventHandler(object sender, CreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DeliveryCompletedEventHandler(object sender, DeliveryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliveryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliveryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void MultiDeliveryCompletedEventHandler(object sender, MultiDeliveryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultiDeliveryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MultiDeliveryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVirtualNumbersCompletedEventHandler(object sender, GetVirtualNumbersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVirtualNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetPhoneGroupsCompletedEventHandler(object sender, GetPhoneGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPhoneGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPhoneGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SendToGroupCompletedEventHandler(object sender, SendToGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void ScheduledSendCompletedEventHandler(object sender, ScheduledSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduledSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduledSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetScheduleStatusCompletedEventHandler(object sender, GetScheduleStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduleStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void RemoveScheduledSendCompletedEventHandler(object sender, RemoveScheduledSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveScheduledSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveScheduledSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetInboxCompletedEventHandler(object sender, GetInboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591